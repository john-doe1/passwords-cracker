# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*,cover
.hypothesis/

# Translations
*.mo
*.pot

# Django stuff:
*.log

# Sphinx documentation
docs/_build/

# PyBuilder
target/

#Ipython Notebook
.ipynb_checkpoints






#up to 512 bit passcode must be cracked
#all characters

import os
import sys
import random

#options

type_of_paswords = raw_input("number of bits in password? ie: 16,32,64...512")
while type_of_paswords != "16" and type_of_paswords != "32" and type_of_paswords != "64" and type_of_paswords != 128 and type_of_paswords != "256" and type_of_paswords != "512":
  type_of_paswords = raw_input("no you did it wrong, put a base two number between 16 and 512")

def 16bitscreate():
def 32bitscreate():
def 64bitscreate():
def 128bitscreate():
def 256bitscreate():
def 512bitscreate():


if type_of_paswords = "16":
  16bitscreate()
elif type_of_paswords = "32":
  32bitscreate()
elif type_of_paswords = "64":
  64bitscreate()
elif type_of_paswords = "128":
  128bitscreate()
elif type_of_paswords = "256":
  256bitscreate()
elif type_of_paswords = "256":
  512bitscreate()
else:
  print "Error"



for password in passwfile:
  try:
    smtpserver.login(user, password)
                
    print "[+] Password Found %s" % password
    break;
  except smtplib.SMTPAuthenticationError:
    print "[!] Password Incorrect: %s" % password






